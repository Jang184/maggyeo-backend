service: maggyeo
frameworkVersion: "3"

custom:
    stage: ${opt:stage, 'dev'}

provider:
    name: aws
    runtime: nodejs14.x
    region: ap-northeast-2
    stage: ${opt:stage, 'dev'}
    profile: maggyeo-backend
    environment:
        stage: ${self:provider.stage}
        TARGET_ENV: ${self:provider.stage}
#   iam:
#     role:
#       statements:
#         - Effect: "Allow"
#           Action:
#             - "s3:ListBucket"

functions:
    auth:
        handler: src/utils/authorizer.handler

    signUp:
        handler: src/controllers/index.signUp
        events:
            - http:
                  path: signup
                  method: post

    signIn:
        handler: src/controllers/index.signIn
        events:
            - http:
                  path: login
                  method: post

    getUserInfo:
        handler: src/controllers/index.getUserInfo
        events:
            - http:
                  path: user
                  method: get
                  authorizer:
                      name: auth
                      type: token
                      #   identitySource: method.request.header.Authorization

    getUserList:
        handler: src/controllers/index.getUserList
        events:
            - http:
                  path: user/list
                  method: get
                  authorizer: auth

    getUserParticipate:
        handler: src/controllers/index.getUserParticipate
        events:
            - http:
                  path: user/participate
                  method: get
                  authorizer: auth

    getUserReceivedMessage:
        handler: src/controllers/index.getUserReceivedMessage
        events:
            - http:
                  path: user/message
                  method: get
                  authorizer: auth

    patchUser:
        handler: src/controllers/index.patchUser
        events:
            - http:
                  path: user
                  method: patch
                  authorizer: auth

    getPresentList:
        handler: src/controllers/index.getPresentList
        events:
            - http:
                  path: list/{listId}
                  method: get

    getPresentLists:
        handler: src/controllers/index.getPresentLists
        events:
            - http:
                  path: list
                  method: get

    patchPresentList:
        handler: src/controllers/index.patchPresentList
        events:
            - http:
                  path: list/{listId}
                  method: patch
                  authorizer: auth

    createPresentList:
        handler: src/controllers/index.createPresentList
        events:
            - http:
                  path: list
                  method: post
                  authorizer: auth

    deletePresentList:
        handler: src/controllers/index.deletePresentList
        events:
            - http:
                  path: list/{listId}
                  method: delete
                  authorizer: auth
# resources:
#     Resources:
# This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
#         GatewayResponse:
#             Type: "AWS::ApiGateway::GatewayResponse"
#             Properties:
#                 ResponseParameters:
#                     gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#                     gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#                 ResponseType: EXPIRED_TOKEN
#                 RestApiId:
#                     Ref: "ApiGatewayRestApi"
#                 StatusCode: "401"
#         AuthFailureGatewayResponse:
#             Type: "AWS::ApiGateway::GatewayResponse"
#             Properties:
#                 ResponseParameters:
#                     gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
#                     gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
#                 ResponseType: UNAUTHORIZED
#                 RestApiId:
#                     Ref: "ApiGatewayRestApi"
#                 StatusCode: "401"
plugins:
    - serverless-plugin-typescript
    - serverless-offline
    - serverless-dotenv-plugin
